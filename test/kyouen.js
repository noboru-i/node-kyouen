"use strict";
var expect = require("chai").expect;
var { Point } = require("../dist/point.js");
var { Kyouen } = require("../dist/kyouen.js");

describe("hasKyouen function", () => {
  it("should return null", () => {
    var result = new Kyouen([
      new Point(1, 1),
      new Point(2, 3),
      new Point(2, 3)
    ]).hasKyouen();
    expect(result).to.be.null;
  });

  it("should return line kyouen", () => {
    var result = new Kyouen([
      new Point(1, 1),
      new Point(2, 2),
      new Point(3, 3),
      new Point(4, 4)
    ]).hasKyouen();
    expect(result.lineKyouen).to.be.true;
    expect(result.line.getY(-1)).to.equal(-1);
  });

  it("should return oval kyouen", () => {
    var result = new Kyouen([
      new Point(2, 2),
      new Point(3, 2),
      new Point(2, 3),
      new Point(3, 3)
    ]).hasKyouen();
    expect(result.lineKyouen).to.be.false;
    expect(result.center).to.deep.equal(new Point(2.5, 2.5));
    expect(result.radius).to.equal(0.5 * Math.sqrt(2));
  });

  it("should return oval kyouen by 5 stones", () => {
    var result = new Kyouen([
      new Point(0, 0),
      new Point(2, 2),
      new Point(3, 2),
      new Point(2, 3),
      new Point(3, 3)
    ]).hasKyouen();
    expect(result.lineKyouen).to.be.false;
    expect(result.center).to.deep.equal(new Point(2.5, 2.5));
    expect(result.radius).to.equal(0.5 * Math.sqrt(2));
  });

  const KYOUEN_STAGES = `000000010000001100001100000000001000
000000000000000100010010001100000000
000000001000010000000100010010001000
001000001000000010010000010100000000
000000001011010000000010001000000010
000100000000101011010000000000000000
000000001010000000010010000000001010
001000000001010000010010000001000000
000000001000010000000010000100001000
000100000010010000000100000010010000
010001000000001010000000010000000000
001010000000010001000010001000000100
000100000010001000000100010010001000
000010000100001000001010010000001000
000000010010000000100010000100001000
000000000100001000010010000000000100
000000010000001010000000010000001010
000010010000000100100000010100000000
001000100001000000010001000000000100
000010010001001000000100000000001000
000000010100000010000000001000010010
000100000000011000001000000010010100
000010000010010000000000100001001000
000000001001010000000000000010000000001000100000100000010000001000001000000000000
010000100000010000001000001000000110
001000010000000000001000000100010001
000000100000000000001000001000010000000000000000101000000000000001010000000000001
000000001000010100000010001000000000
010100000100010000000010001000001000
100000000000010101101000000010010000
000000001100000000110100000000001001
000000010101001000100010010000000010
000000000000000000010100000000000000000001000010000000000001010100000000001000001
101000000000000000000001000000000001000000101001000000000010000000000000000000000
000000000001001000000001001000100000000000000000100000000001000000000000100100000
000000001010000000000000001000000000000000000000100000010000000000000001000000000
100100000000000000010000000000000000000000000000000000000000100000000000000100010
000000000001000000000000000000010001000100000000001000000001000000000000100100001
100001000010010000100010000001001000
000000000000000010010110000010001000
000010000000010101000000001010000000
010011010000000001100000000000001011
011001000000100000000001000000100010
001000000010010000010001000010000101
010010010000000000000000001100000000000000000000000000000000001100000000000000100
000000000000000100000100000000000000001000101000000000000100100000000000000000010
000000100000000000000101010000000000001010010000000000000101000000000000000000000
000010010000001010010100000000000100
111000010101100000000000000000000000
100100000000010000000100000000100101`;
  KYOUEN_STAGES.split("\n").forEach(stage => {
    it("should " + stage + " has kyouen", () => {
      var result = new Kyouen(stonesFromString(stage)).hasKyouen();
      expect(result).to.not.be.null;
    });
  });

  const NOT_KYOUEN_STAGES = `000000010000001100001000000000001000
000000000000000100010010000100000000
000000000000010000000100010010001000
001000000000000010010000010100000000
000000000011010000000010001000000010
000100000000100011010000000000000000
000000000010000000010010000000001010
001000000000010000010010000001000000
000000000000010000000010000100001000
000000000010010000000100000010010000`;
  NOT_KYOUEN_STAGES.split("\n").forEach(stage => {
    it("should not " + stage + " has kyouen", () => {
      var result = new Kyouen(stonesFromString(stage)).hasKyouen();
      expect(result).to.be.null;
    });
  });

  function stonesFromString(stage) {
    const size = Math.sqrt(stage.length);
    var stoneArray = [];
    Array.from(Array(size).keys()).forEach(x => {
      Array.from(Array(size).keys()).forEach(y => {
        const index = x + y * size;
        const char = stage.substring(index, index + 1);
        if (char == "1") {
          stoneArray.push(new Point(x, y));
        }
      });
    });
    return stoneArray;
  }
});
